df_unique$feature == "building"  ~  '14',
df_unique$feature == "linear_feature_vh_traffic"  ~  '15',
df_unique$feature == "linear_feature_no_traffic_side"  ~  '16', # sidewalks
df_unique$feature == "linear_feature_na_traffic"  ~   '17',
df_unique$feature == "linear_feature_vl_traffic"  ~  '18',
df_unique$feature == "linear_feature_l_traffic"  ~  '19',
df_unique$feature == "linear_feature_m_traffic"  ~  '20',
df_unique$feature == "linear_feature_h_traffic_ls"  ~  '21',
df_unique$feature == "linear_feature_h_traffic_hs"  ~  '22',
df_unique$feature == "linear_feature_rail_trams"  ~  '23', # tram_lines
df_unique$feature == "linear_feature_no_traffic" ~  '24', # except sidewalks
df_unique$feature == "linear_feature_rail"  ~  '25',
df_unique$feature == "linear_feature_rail_abandoned"  ~  '26',
df_unique$feature == "barrier"  ~  '27'))
df_unique_res$class <- df_unique_res$priority
#View(df_unique_res)
df_unique_res$priority <- as.numeric(df_unique_res$priority)
df1 <- df_unique_res[,c('feature', 'type', 'view', 'priority')]
priority_table_red$priority <- as.numeric(priority_table_red$priority)
# remove duplicates
df1 <- df1[!duplicated(df1), ]
#add resistance values in the priority_Table
df1 <- left_join(df1, priority_table_red, by='priority')
# large_mammals (Only need to create land cover with largeMam or smallMam but not both as they both have the same class values)
df1 <- df1[!is.na(df1$priority),]
print("priority part done")
largeMam <- df1 %>% dplyr::select("feature", "type", "view", "priority") # We should call this largeMam obj something else to avoid confusion
featUrb <- unique(df1$view)
# To save list of features of each city
#dir.create(paste0(outF, "/", city[k],"/","misc"))
#saveRDS(df1, paste0(outF, "/", city[k],"/","misc", "/","df1"))
detach("package:dplyr", unload=TRUE)
print("features part done")
# ------------------------------------------------------------
# Query individual layers in PG OSM database to create rasters
for (i in 1:length(featUrb)) {
vals <- sqldf::sqldf(paste0("SELECT distinct priority FROM largeMam WHERE view='", featUrb[i],"' ORDER BY priority;"))
for (j in 1:nrow(vals)) {
sqlPrimer <- sqldf::sqldf(paste0("SELECT distinct feature, type, priority, view FROM largeMam WHERE view='", featUrb[i],"' AND priority=", vals$priority[j], " ;"))
queryEnv <- paste0("SELECT * FROM ",city[k],"_env", ";")
# the [1] could be removed if there are no dups
queryUrFts <-paste0("SELECT ", sqlPrimer$priority[1]," as class, geom
FROM
(
SELECT (ST_DUMP(ST_Intersection(t1.geom, t2.geom))).geom::geometry('Polygon', 3857) AS geom
FROM (",
paste0("SELECT * FROM ", sqlPrimer$view[1], " ",ifelse(grepl('NULL', paste(sqlPrimer$type, collapse = "', '")), paste0(" WHERE type IS NULL OR type ", paste0("IN (","'",paste(sqlPrimer$type, collapse = "', '"), "'", ")" )), paste0("WHERE TYPE IN (","'",paste(sqlPrimer$type, collapse = "', '"), "'", ")" ) )) ,
") t1
JOIN
", city[k],"_env", " t2
ON st_intersects(t1.geom,t2.geom)) t3;")
vectorEnv <- terra::vect(sf::st_read(con_pg, query=queryEnv))
raster1 <- terra::rast(vectorEnv, resolution=30, crs=crs(vectorEnv))
print(paste("done feature", featUrb[i]))
#queryUrFts <- paste0("SELECT * FROM ", city[i],"_ur_fts", ";" )
vectorUrFts <- try(terra::vect(sf::st_read(con_pg, query=queryUrFts)) ) # when vector has no rows then Warning: 1: [SpatVector from sf] empty SpatVector
if(class(vectorUrFts) == "try-error") { vectorUrFts <- c() }
if( length(vectorUrFts)==0)
{ print("empty vector")} else
{
rasterRes1 <- terra::rasterize(vectorUrFts, raster1, field="class", background=NA, touches=FALSE,
update=FALSE, sum=FALSE, cover=FALSE, overwrite=FALSE)
dir.create(paste0(outF,"lcrasters"))
dir.create(paste0(outF,"lcrasters/",city[k]))
terra::writeRaster(rasterRes1, paste0(outF,"lcrasters/",city[k],"/",sqlPrimer$view[1],"__",sqlPrimer$priority[1],"__",sqlPrimer$priority[1],".tif"), overwrite=TRUE)
}
}
}
}
for (k in 1:length(city)) {
# Read raster based on priority flag first, then stack, and collapse
rasterFiles <- list.files(paste0(outF,"lcrasters/",city[k]), pattern='.tif$', full.names = TRUE)
resVals <- sapply(strsplit(rasterFiles, "__"), "[", 3)
resVals <- gsub(".tif", "", resVals)
#resVals <- as.integer(resVals)
priVals <- sapply(strsplit(rasterFiles, "__"), "[", 2)
priOrd <- as.data.frame(cbind(rasterFiles, priVals, resVals))
priOrd$priority <- as.numeric(priOrd$priVals)
priOrd$resistance <- as.numeric(priOrd$resVals)
priOrd <- priOrd[order(-priOrd$priority),] #reverse order
priOrd$order <- 1:nrow(priOrd)
r1 <- terra::rast(priOrd$rasterFiles)
r3 <- terra::app(r1, fun='first', na.rm=TRUE)
#r3 <- subst(r2, NA, 50)
#r3 <- r2
dir.create(paste0(outF,"lcrasters/",city[k],"/output"))
terra::writeRaster(r3, paste0(outF,"lcrasters/",city[k],"/output/",'osm_lcover.tif'), overwrite=TRUE)
}
rforAge <- rast(fpath3)
bbox <- terra::project(vect(shp1), rforAge)
rforAge <- crop(rforAge, bbox)
fact <- round(dim(rforAge)[1:2] / dim(r10)[1:2]) # high resolution raster / low resolution raster. Proj does not need to be the same but shoudl be equivalent extents
rforAgeAgg <- aggregate(rforAge, fact, modal)
rforAgeAgg2 <- project(rforAgeAgg, crs(r10),  method='near', threads=TRUE)
global(rforAgeAgg2, fun="isNA")
global(rforAge, fun="isNA")
global(rforAgeAgg, fun="isNA")
global(rforAgeAgg2, fun="isNA")
rforAgeAgg2
rforAge2 <- rforAge2-16
rforAge2 <- ifel(rforAge2 <= 0, NA, rforAge2)
rforAge2
rforAgeAgg
rforAgeAgg2
rforAgeAgg2 <- rforAgeAgg2-16
rforAgeAgg2 <- ifel(rforAgeAgg2 <= 0, NA, rforAgeAgg2)
rforAgeAgg2
m12 <-  c(0, 20, 1,
20, 40, 2,
40, 60, 3,
60, 80, 4,
80, 100, 5,
100, 120, 6,
120, 140, 7,
140, 151, 8) # This is in fact the class 140+, after classifying 130+
rclM12 <- matrix(m12, ncol=3, byrow=TRUE)
rforAgeAgg3 <- classify(rforAgeAgg2, rclM12, include.lowest=FALSE)
rforAgeAgg3
global(rforAgeAgg3, fun="isNA")
rforAgeAgg2
1088*1724
rforAgeAgg3<- crop(rforAgeAgg3, vect(shp1)) # 1008420 cells
rforAgeAgg3 <- resample(rforAgeAgg3, r10, method='near')
global(rforAgeAgg3, fun="isNA")
rforAgeAgg3
481*1029
286011/494949*100
rforAge <- rast(fpath3)
bbox <- terra::project(vect(shp1), rforAge)
rforAge <- crop(rforAge, bbox)
#rforAge  <-  terra::subst(rforAge , 0, NA)
#global(rforAge, fun="isNA") # 3004864 NAs out of 24921876, 12% NAs; 3005208/24921876*100, 12% NAs
#global(rforAge, fun="notNA")
#plot(rforAge)
#plot(bbox, add=T)
rforAge  <-  terra::subst(rforAge , 0, NA)
global(rforAge, fun="isNA")
rforAge <- rforAge-16
rforAge <- ifel(rforAge <= 1, 1, rforAge)
rforAge2 <- classify(rforAge, rclM12, include.lowest=FALSE)
fact <- round(dim(rforAge)[1:2] / dim(r10)[1:2])
fact <- round(dim(rforAge2)[1:2] / dim(r10)[1:2]) # high resolution raster / low resolution raster. Proj does not need to be the same but shoudl be equivalent extents
rforAgeAgg <- aggregate(rforAge2, fact, modal)
rforAgeAgg
global(rforAgeAgg, fun="isNA")
477*1046
rforAgeAgg
rforAgeAgg2 <- project(rforAgeAgg, crs(r10),  method='near', threads=TRUE)
global(rforAgeAgg2, fun="isNA")
rforAgeAgg2
1088 *1724
1338083/1875712*100
rforAgeAgg2 <- resample(rforAgeAgg2, r10, method='near')
rforAgeAgg2
global(rforAgeAgg2, fun="isNA")
284786/494949*100
rforAge <- rast(fpath3)
bbox <- terra::project(vect(shp1), rforAge)
plot(rForAge)
plot(rforAge)
rforAge <- crop(rforAge, bbox)
plot(rforAge)
global(rforAge, fun="isNA")
rforAge
cells(rforAge)
summary(rforAge)
dim(rforAge)
ncol(rforAge)
ncol(rforAge)*nrow(rforAge)
global(rforAge, fun="isNA")/(ncol(rforAge)*nrow(rforAge))*100
global(rforAge, fun="notNA")/(ncol(rforAge)*nrow(rforAge))*100
rforAge <- rforAge-16
rforAge <- ifel(rforAge <= 1, 1, rforAge)
fact <- round(dim(rforAge2)[1:2] / dim(r10)[1:2])
fact
rforAgeAgg <- aggregate(rforAge2, fact, modal)
global(rforAgeAgg , fun="isNA")/(ncol(rforAgeAgg )*nrow(rforAgeAgg))*100
rforAgeAgg <- aggregate(rforAge2, fact, modal, na.rm=T)
rforAgeAgg <- aggregate(rforAge, fact, modal, na.rm=T)
global(rforAgeAgg , fun="isNA")/(ncol(rforAgeAgg )*nrow(rforAgeAgg))*100
rforAgeAgg <- aggregate(rforAge, fact, modal)
global(rforAgeAgg , fun="isNA")/(ncol(rforAgeAgg )*nrow(rforAgeAgg))*100
rforAgeAgg
rforAge
rforAgeAgg2 <- project(rforAgeAgg, crs(r10),  method='near', threads=TRUE)
global(rforAgeAgg2, fun="isNA")/(ncol(rforAgeAgg2)*nrow(rforAgeAgg2))*100
global(rforAgeAgg , fun="isNA")/(ncol(rforAgeAgg )*nrow(rforAgeAgg))*100
rforAgeAgg <- aggregate(rforAge, fact, modal, na.rm=T) # na.rm=T is key because terra is couting NAs
global(rforAgeAgg , fun="isNA")/(ncol(rforAgeAgg )*nrow(rforAgeAgg))*100
rforAgeAgg2 <- project(rforAgeAgg, crs(r10),  method='near', threads=TRUE) # projecting increases the resolution
global(rforAgeAgg2, fun="isNA")/(ncol(rforAgeAgg2)*nrow(rforAgeAgg2))*100
crs(r10)
rforAgeAgg
rforAgeAgg2
r10
1088*1724
477*1046
rforAgeAgg2 <- project(rforAgeAgg, r10,  method='near', threads=TRUE)
global(rforAgeAgg2, fun="isNA")/(ncol(rforAgeAgg2)*nrow(rforAgeAgg2))*100
global(rforAgeAgg , fun="isNA")
global(rforAgeAgg2, fun="isNA")
rforAgeAgg
r10
rforAgeAgg2
rforAgeAgg2 <- project(rforAgeAgg, r10,  method='bilinear', threads=TRUE) # projecting increases the resolution
global(rforAgeAgg2, fun="isNA")
rforAgeAgg2
rforAgeAgg2 <- project(rforAgeAgg, r10,  method='near', threads=TRUE) # projecting increases the resolution
rforAgeAgg
rforAgeAgg2 <- project(rforAgeAgg, r10,  method='near', threads=TRUE)
rforAgeAgg2
r10
global(rforAgeAgg , fun="isNA")/(ncol(rforAgeAgg )*nrow(rforAgeAgg))*100
rforAgeAgg2 <- project(rforAgeAgg, r10,  method='near', threads=TRUE)
global(rforAgeAgg2, fun="isNA")/(ncol(rforAgeAgg2)*nrow(rforAgeAgg2))*100
rforAgeAgg2 <- project(rforAgeAgg, r10,  method='bilinear', threads=TRUE) # projecting increases the resolution
global(rforAgeAgg2, fun="isNA")/(ncol(rforAgeAgg2)*nrow(rforAgeAgg2))*100
global(rforAgeAgg2, fun="isNA")/(ncol(rforAgeAgg2)*nrow(rforAgeAgg2))*100
# 20 yr age classes
m12 <-  c(0, 20, 1,
20, 40, 2,
40, 60, 3,
60, 80, 4,
80, 100, 5,
100, 120, 6,
120, 140, 7,
140, 151, 8) # This is in fact the class 140+, after classifying 130+
rclM12 <- matrix(m12, ncol=3, byrow=TRUE)
rclM12
rforAgeAgg2
r10
rforAge2 <- classify(rforAgeAgg2, rclM12, include.lowest=FALSE)
rforAge2
global(rforAge2, fun="isNA")/(ncol(rforAge2)*nrow(rforAge2))*100
rforAge <- rast(fpath3)
bbox <- terra::project(vect(shp1), rforAge)
rforAge <- crop(rforAge, bbox)
#rforAge  <-  terra::subst(rforAge , 0, NA)
#global(rforAge, fun="isNA")/(ncol(rforAge)*nrow(rforAge))*100, 12% NAs
#global(rforAge, fun="notNA")/(ncol(rforAge)*nrow(rforAge))*100, 88%
#plot(rforAge)
#plot(bbox, add=T)
rforAge  <-  terra::subst(rforAge , 0, NA)
# 20 yr age classes
m12 <-  c(0, 20, 1,
20, 40, 2,
40, 60, 3,
60, 80, 4,
80, 100, 5,
100, 120, 6,
120, 140, 7,
140, 151, 8) # This is in fact the class 140+, after classifying 130+
rclM12 <- matrix(m12, ncol=3, byrow=TRUE)
# Forest age has to be substracted 16 years so that the age is that of 2003 which is the start of my time series
rforAge <- rforAge-16
rforAge <- ifel(rforAge <= 1, 1, rforAge)
#global(rforAge, fun="isNA") # # isna= 3109461 (-3004864 = 104597 new NAs),
#hist(rforAge)
rforAge2 <- classify(rforAge, rclM12, include.lowest=FALSE)
#global(rforAge2, fun="isNA")
#plot(rforAge2, type="classes")
# rbrks3Pj <- project(rbrks[[3]], crs(rforAge)) # This is not needed.
# plot(rbrks3Pj)
# plot(bbox, add=T)
fact <- round(dim(rforAge2)[1:2] / dim(r10)[1:2])
rforAgeAgg <- aggregate(rforAge, fact, modal, na.rm=T)
rforAgeAgg2 <- project(rforAgeAgg, r10,  method='near', threads=TRUE)
global(rforAgeAgg2, fun="isNA")/(ncol(rforAgeAgg2)*nrow(rforAgeAgg2))*100
plot(rforAgeAgg2)
rforAgeAgg <- project(rforAgeAgg, r10,  method='near', threads=TRUE)
dfL1 <- foreach (i=1:nlyr(rforAgeAgg), .inorder=TRUE) %do%
{
setNames(as.data.frame(rforAgeAgg[[i]], row.names=NULL, optional=FALSE, xy=FALSE, cells=TRUE, na.rm=NA),c("pix", "value"))
}
#head(dfL1[[1]])
#names(df0) <- c("pix", "value", "year")
df1ForAge <- do.call(rbind, dfL1)
df2 <- sqldf("SELECT t1.*, t2.year as fire_year, t3.year AS harv_year, t4.year AS insc_year, t5.value AS for_age, t6.value AS for_type FROM allBrksLDf t1 LEFT JOIN df1Fire t2 ON t1.pix=t2.pix LEFT JOIN df1Har t3 ON t1.pix=t3.pix
LEFT JOIN df1Insc t4 ON t1.pix=t4.pix LEFT JOIN df1ForAge t5 ON t1.pix=t5.pix LEFT JOIN df1ForType t6 ON t1.pix=t6.pix WHERE brk >= 0")
dim(df2) # 281991     11; 282761     12; 282767     13; 282767     14
summary(df2)
dim(df2[which(df2$brk==0 & is.na(df2$for_age)),])
dim(df2)
dim(df2[which(df2$brk==0 & !is.na(df2$for_age)),])
dim(df2[which(df2$brk==0 & is.na(df2$for_type)),])
fpath2
rforType <- rast(fpath2)
bbox <- project(vect(shp1), rforType) # here shp1 is the pj box
rforType <- crop(rforType, bbox)
rforType <- ifel(rforType ==0, NA, rforType)
#global(rforType, fun="isNA") # No NAs in NFIS data, only 0's; 3063173 NA after converting 0's to NA.
#plot(rforType)
#plot(bbox, add=T)
# Reclassify Land cover to keep only forest
forType1 <- read.csv(fpath5)
rclM2 <- as.matrix(forType1[,c(1,5)]) # 0 means non-forest cover/land
rforType2 <- classify(rforType ,rclM2)
#plot(rforType2, type="classes")
#plot(bbox, add=T)
fact <- round(dim(rforType2)[1:2] / dim(r10)[1:2]) # high resolution raster / low resolution raster. Proj does not need to be the same but shoudl be equivalent extents
rforType3 <- aggregate(rforType2, fact, modal, na.rm=TRUE)
rforType3 <- project(rforType3, r10,  method='near', threads=TRUE)
bbox_pj <- vect(shp1)
rforType3
r10
rforType3 <- resample(rforType3, r10, method='near') # make sure rbrks is cropped to bbox
rforType3 <- mask(rforType3, bbox_pj) # this is needed to make extra cells NA
dfL1 <- foreach (i=1:nlyr(rforType3), .inorder=TRUE) %do%
{
setNames(as.data.frame(rforType3[[i]], row.names=NULL, optional=FALSE, xy=FALSE, cells=TRUE, na.rm=NA),c("pix", "value"))
}
#head(dfL1[[1]])
df1ForType <- do.call(rbind, dfL1)
df2 <- sqldf("SELECT t1.*, t2.year as fire_year, t3.year AS harv_year, t4.year AS insc_year, t5.value AS for_age, t6.value AS for_type FROM allBrksLDf t1 LEFT JOIN df1Fire t2 ON t1.pix=t2.pix LEFT JOIN df1Har t3 ON t1.pix=t3.pix
LEFT JOIN df1Insc t4 ON t1.pix=t4.pix LEFT JOIN df1ForAge t5 ON t1.pix=t5.pix LEFT JOIN df1ForType t6 ON t1.pix=t6.pix WHERE brk >= 0")
dim(df2) # 281991     11; 282761     12; 282767     13; 282767     14
summary(df2)
dim(df2[which(df2$brk==0 & is.na(df2$for_type)),])
rforType3
r10
global(rforType, fun="isNA")
rforType <- rast(fpath2)
bbox <- project(vect(shp1), rforType) # here shp1 is the pj box
rforType <- crop(rforType, bbox)
rforType <- rast(fpath2)
bbox <- project(vect(shp1), rforType) # here shp1 is the pj box
rforType <- crop(rforType, bbox)
global(rforType, fun="isNA")
global(rforAge, fun="isNA")
rforAge <- rast(fpath3)
bbox <- terra::project(vect(shp1), rforAge)
rforAge <- crop(rforAge, bbox)
global(rforAge, fun="isNA")
rforType <- rast(fpath2)
global(rforType, fun="isNA")
rforType <- terra::subst(rforAge , 0, NA)
rforType <- rast(fpath2)
bbox <- project(vect(shp1), rforType) # here shp1 is the pj box
rforType <- crop(rforType, bbox)
global(rforType, fun="isNA")
rforType <- terra::subst(rforAge , 0, NA)
global(rforType, fun="isNA")
global(rforType, fun="isNA")/(ncol(rforType)*nrow(rforType))*100
forType1 <- read.csv(fpath5)
rclM2 <- as.matrix(forType1[,c(1,5)]) # 0 means non-forest cover/land
rforType2 <- classify(rforType ,rclM2)
#plot(rforType2, type="classes")
#plot(bbox, add=T)
fact <- round(dim(rforType2)[1:2] / dim(r10)[1:2]) # high resolution raster / low resolution raster. Proj does not need to be the same but shoudl be equivalent extents
rforType3 <- aggregate(rforType2, fact, modal, na.rm=TRUE)
global(rforType3, fun="isNA")/(ncol(rforType3)*nrow(rforType3))*100
rforType3 <- project(rforType3, r10,  method='near', threads=TRUE)
global(rforType3, fun="isNA")/(ncol(rforType3)*nrow(rforType3))*100
rforType3
rforType <- rast(fpath2)
bbox <- project(vect(shp1), rforType) # here shp1 is the pj box
rforType <- crop(rforType, bbox)
#global(rforType, fun="isNA") # No NAs in forest type NFIS data, only 0's; 3063173 NA after converting 0's to NA.
#plot(rforType)
#plot(bbox, add=T)
rforType <- terra::subst(rforType , 0, NA)
global(rforType, fun="isNA")/(ncol(rforType)*nrow(rforType))*100
rforType
forType1 <- read.csv(fpath5)
rclM2 <- as.matrix(forType1[,c(1,5)]) # 0 means non-forest cover/land
rforType2 <- classify(rforType ,rclM2)
#plot(rforType2, type="classes")
#plot(bbox, add=T)
fact <- round(dim(rforType2)[1:2] / dim(r10)[1:2]) # high resolution raster / low resolution raster. Proj does not need to be the same but shoudl be equivalent extents
rforType3 <- aggregate(rforType2, fact, modal, na.rm=TRUE)
global(rforType3, fun="isNA")/(ncol(rforType3)*nrow(rforType3))*100
rforType3 <- project(rforType3, r10,  method='near', threads=TRUE)
rforType3
forType1
rforType3 <- project(rforType3, r10,  method='near', threads=TRUE)
global(rforType3, fun="isNA")/(ncol(rforType3)*nrow(rforType3))*100
rforType4 <- resample(rforType3, r10, method='near') # make sure rbrks is cropped to bbox
rforType4 <- mask(rforType4, bbox_pj)
rforType3==rforType4
rforType3
rforType4
dfL1 <- foreach (i=1:nlyr(rforType3), .inorder=TRUE) %do%
{
setNames(as.data.frame(rforType3[[i]], row.names=NULL, optional=FALSE, xy=FALSE, cells=TRUE, na.rm=NA),c("pix", "value"))
}
#head(dfL1[[1]])
df1ForType <- do.call(rbind, dfL1)
df2 <- sqldf("SELECT t1.*, t2.year as fire_year, t3.year AS harv_year, t4.year AS insc_year, t5.value AS for_age, t6.value AS for_type FROM allBrksLDf t1 LEFT JOIN df1Fire t2 ON t1.pix=t2.pix LEFT JOIN df1Har t3 ON t1.pix=t3.pix
LEFT JOIN df1Insc t4 ON t1.pix=t4.pix LEFT JOIN df1ForAge t5 ON t1.pix=t5.pix LEFT JOIN df1ForType t6 ON t1.pix=t6.pix WHERE brk >= 0")
dim(df2) # 281991     11; 282761     12; 282767     13; 282767     14
summary(df2)
dim(df2[which(df2$brk==0 & is.na(df2$for_type)),])
rpath1
vect1
inscYr
fpath6 <- "C:/Users/Peter%20R/Documents/st_trends_for_c/algonquin/ver2/data/gis/protected_areas_qgis_v1.tif"
shp1L
shp1L <- list()
shp1L[[1]] <- "C:/Users/Peter R/Documents/st_trends_for_c/shp/cpcad_algonquin_bbox_v1.shp"
rast(fpath6)
fpath6
file.exists(fpath6)
fpath6 <- "C:/Users/Peter R/Documents/st_trends_for_c/algonquin/ver2/data/gis/protected_areas_qgis_v1.tif"
rast(fpath6)
shp1L <- list()
shp1L[[1]] <- "C:/Users/Peter R/Documents/st_trends_for_c/shp/cpcad_algonquin_bbox_v1.shp"
vpolyList1[[y]]
vpolyList1 <- list()
for (y in 1:length(shp1L)) {
temp1 <- vect(st_read(shp1L[y]))
vpolyList1[[y]] <- project(temp1, r2_template )
}
rast(rpath1)
# template raster
# This is a shortcut so that I do not have to create rasters again
fpath1 <- "C:/Users/Peter R/Documents/st_trends_for_c/algonquin/r2_template.tif"
# transform shp1 to raster projection
vpolyList1 <- list()
for (y in 1:length(shp1L)) {
temp1 <- vect(st_read(shp1L[y]))
vpolyList1[[y]] <- project(temp1, r2_template )
}
r2_template <- rast(rpath1)
algonquin1 <- vect("C:/Users/Peter R/Documents/st_trends_for_c/shp/algonquin_boundary_v1.shp")
bbox_pj <- vect("C:/Users/Peter R/Documents/st_trends_for_c/shp/algonquin_envelope_500m_buff_v1_pj.shp")
algonquin1_pj <- project(algonquin1, terra::crs(r2_template))
#plot(bbox_pj, add=T)
r2_template <- rast(rpath1)
rpath1
r2_template <- rast(fpath1)
algonquin1 <- vect("C:/Users/Peter R/Documents/st_trends_for_c/shp/algonquin_boundary_v1.shp")
bbox_pj <- vect("C:/Users/Peter R/Documents/st_trends_for_c/shp/algonquin_envelope_500m_buff_v1_pj.shp")
algonquin1_pj <- project(algonquin1, terra::crs(r2_template))
r2 <- mask(r2_template[[1]], bbox_pj)
vpolyList1 <- list()
for (y in 1:length(shp1L)) {
temp1 <- vect(st_read(shp1L[y]))
vpolyList1[[y]] <- project(temp1, r2_template )
}
head(vpolyList1[[y]])
r2_template
r2
rasterize(vpolyList1[[y]], r2_template, field="gid", background=NA, touches=FALSE, update=FALSE, sum=FALSE, cover=FALSE, filename="", paste0(outf4, "protected_areas1", ".tif"), overwrite=FALSE)
rPro <- rasterize(vpolyList1[[y]], r2_template, field="gid", background=NA, touches=FALSE, update=FALSE, sum=FALSE, cover=FALSE, filename="", paste0(outf4, "protected_areas1", ".tif"), overwrite=FALSE)
writeRaster(rPro, paste0(outf4, "protected_areas1", ".tif"), overwrite=TRUE)
outf4
outf4 <- "C:/Users/Peter R/Documents/st_trends_for_c/algonquin/ver2/data/gis"
rPro <- rasterize(vpolyList1[[y]], r2_template, field="gid", background=NA, touches=FALSE, update=FALSE, sum=FALSE, cover=FALSE, filename="", paste0(outf4, "protected_areas1", ".tif"), overwrite=FALSE)
rPro
plot(rPro)
plot(bbox_pj, add=T)
m11 <-  c(2,1)
rclM2 <- matrix(m11, ncol=2, byrow=TRUE)
rclM2
#plot(rPro)
#plot(bbox_pj, add=T)
rPro <- ifel(rPro > 0, 1, rPro)
plot(rPro)
plot(rPro, col="red")
global(rPro, fun="isNA")/(ncol(rPro)*nrow(rPro))*100 # 12% NAs
writeRaster(rPro, paste0(outf4, "protected_areas1", ".tif"), overwrite=TRUE)
paste0(outf4, "protected_areas1", ".tif")
fpath6 <- "C:/Users/Peter R/Documents/st_trends_for_c/algonquin/ver2/data/gisprotected_areas1.tif"
dfL1 <- foreach (i=1:nlyr(rPro), .inorder=TRUE) %do%
{
setNames(as.data.frame(rPro[[i]], row.names=NULL, optional=FALSE, xy=FALSE, cells=TRUE, na.rm=NA),c("pix", "value"))
}
head(dfL1[[1]])
head(dfL1[[1]], 30)
tail(dfL1[[1]], 30)
summary(dfL1[[1]])
df1ForPro <- do.call(rbind, dfL1)
df2 <- sqldf("SELECT t1.*, t2.year as fire_year, t3.year AS harv_year, t4.year AS insc_year, t5.value AS for_age, t6.value AS for_type, t7.value AS for_pro FROM allBrksLDf t1 LEFT JOIN df1Fire t2 ON t1.pix=t2.pix LEFT JOIN df1Har t3 ON t1.pix=t3.pix
LEFT JOIN df1Insc t4 ON t1.pix=t4.pix LEFT JOIN df1ForAge t5 ON t1.pix=t5.pix LEFT JOIN df1ForType t6 ON t1.pix=t6.pix
LEFT JOIN df1ForPro t7 ON t1.pix=t7.pix WHERE brk >= 0")
dim(df2) # 281991     11; 282761     12; 282767     13; 282767     14
summary(df2)
rPro <- rasterize(vpolyList1[[y]], r2_template, field="gid", background=0, touches=FALSE, update=FALSE, sum=FALSE, cover=FALSE)
#writeRaster(rPro, paste0(outf4, "protected_areas1", ".tif"), overwrite=TRUE)
#plot(rPro, col="red")
#plot(bbox_pj, add=T)
rPro <- ifel(rPro > 0, 1, rPro)
#global(rPro, fun="isNA")/(ncol(rPro)*nrow(rPro))*100 # 90% NAs
writeRaster(rPro, paste0(outf4, "protected_areas1", ".tif"), overwrite=TRUE)
dfL1 <- foreach (i=1:nlyr(rPro), .inorder=TRUE) %do%
{
setNames(as.data.frame(rPro[[i]], row.names=NULL, optional=FALSE, xy=FALSE, cells=TRUE, na.rm=NA),c("pix", "value"))
}
#head(dfL1[[1]])
#summary(dfL1[[1]])
df1ForPro <- do.call(rbind, dfL1)
df2 <- sqldf("SELECT t1.*, t2.year as fire_year, t3.year AS harv_year, t4.year AS insc_year, t5.value AS for_age, t6.value AS for_type, t7.value AS for_pro FROM allBrksLDf t1 LEFT JOIN df1Fire t2 ON t1.pix=t2.pix LEFT JOIN df1Har t3 ON t1.pix=t3.pix
LEFT JOIN df1Insc t4 ON t1.pix=t4.pix LEFT JOIN df1ForAge t5 ON t1.pix=t5.pix LEFT JOIN df1ForType t6 ON t1.pix=t6.pix
LEFT JOIN df1ForPro t7 ON t1.pix=t7.pix WHERE brk >= 0")
dim(df2) # 281991     11; 282761     12; 282767     13; 282767     14; 282767     16282767     16
summary(df2)
r1
r100 <- rast("C:/Users/Peter R/Documents/PhD/sophia/output/cpcad_ont_v1.tif")
r100
writeRaster(r100, "C:/Users/Peter R/Documents/PhD/sophia/output/cpcad_ont_v2.asc")
pl0t(r100)
plot(r100)
plot(r100, col="green")
global(r100, fun="isNA")
global(r100, fun="notNA")
freq(r100)
r101 <- subst(r100,NA, 0)
plt(r101, type="classes")
plot(r101, type="classes")
writeRaster(r101, "C:/Users/Peter R/Documents/PhD/sophia/output/cpcad_ont_v2.asc")
writeRaster(r101, "C:/Users/Peter R/Documents/PhD/sophia/output/cpcad_ont_v2.asc", overwrite=TRUE)
writeRaster(r101, "C:/Users/Peter R/Documents/PhD/sophia/output/cpcad_ont_v3.asc", overwrite=TRUE)
